# -*- coding: utf-8 -*-
"""Titanic_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_nuAIsQMXhMjOBZTQWATmnsjOGZTdKM6
"""

#from google.colab import files
import io
import pandas as pd
import numpy as np
import seaborn as sns
import  matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
import math
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import confusion_matrix
from keras.models import Sequential
from keras.layers import Dense
#from google.colab import files

#uploaded = files.upload()

#uploaded2 = files.upload()

#titanic_train = pd.read_csv(io.BytesIO(uploaded['train.csv']))
titanic_train = pd.read_csv('train.csv')

#titanic_test = pd.read_csv(io.BytesIO(uploaded2['test.csv']))
titanic_test = pd.read_csv('test.csv')


titanic_test.head()

titanic_train.info()

titanic_train = titanic_train.set_index('PassengerId')

titanic_train.head()

titanic_train.isnull().sum()

titanic_train.loc[titanic_train['Age'].isnull()]

titanic_train.groupby('Pclass').mean()['Survived']

titanic_train_num = titanic_train.select_dtypes(include=[np.number])
titanic_train_num.columns

for j in ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']:
  print(titanic_train_num.groupby(j).mean()['Survived'])

titanic_train_obj = titanic_train.select_dtypes(exclude=[np.number])
titanic_train_obj

for i in titanic_train_obj:
  print(titanic_train.groupby(i).mean()['Survived'])

Feature_list_obj = ['Sex','Embarked']

Feature_list_num = []

#---------above-----data scanning------#

X = titanic_train.drop(['Survived'], axis=1) #training data
y = titanic_train['Survived'] #prediction

X['AgeGroup']=pd.cut(X['Age'],[0,19,65,100], labels=['Minor','Adult','Elder']) #age catgorized

X = X.drop(['Age'], axis=1)



X_null_check = X.loc[X['AgeGroup'].isnull()] #Null check

X.groupby('AgeGroup').mean()

#Fill in NaN in ['AgeGroup']
for id in X_null_check.index:
  if X.loc[id,'SibSp'] >= 1  and X.loc[id, 'Parch'] >= 1:
    X.loc[id,'AgeGroup'] = 'Minor'
  elif X.loc[id,'SibSp'] >= 1 or X.loc[id, 'Parch'] >= 1:
    X.loc[id,'AgeGroup'] = 'Adult'
  else:
    X.loc[id,'AgeGroup'] = 'Elder'

#X.loc[(X['SibSp'] >= 1) & (X['Parch'] >= 1)] #Check

#X.loc[X_null_check.index][(X['SibSp'] >= 1) | (X['Parch'] >= 1)] #Check

#X.loc[X_null_check.index][(X['SibSp'] >= 1) & (X['Parch'] >= 1)] #Check_minor

X.isnull().sum()

X = X.drop('Cabin', axis=1)

X = X.drop('Ticket', axis=1)

X = X.drop('Name', axis=1)

X.isnull().sum()

X.loc[X['Embarked'].isnull()]

mode = X['Embarked'].mode().values[0]
X['Embarked'] = X['Embarked'].fillna(value=mode) #FillNA with Mode

X.isnull().sum()



# Split Train and Validation set
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=1)

for i in X_train.columns:
  print(X_train[i].dtype != 'int64')

object_cols = [cols for cols in X.columns if (X[cols].dtype != 'int64') & (X[cols].dtype != 'float64')]

object_cols

def score_dataset(X_train, X_test, y_train, y_test):
  model = RandomForestRegressor()
  model.fit(X_train, y_train)
  preds = model.predict(X_test)
  return mean_absolute_error(y_test, preds)

label_X_train = X_train.copy()
label_X_valid = X_valid.copy()

# Apply label encoder to each column with categorical data
label_encoder = LabelEncoder()
for col in object_cols:
  label_X_train[col] = label_encoder.fit_transform(X_train[col])
  label_X_valid[col] = label_encoder.transform(X_valid[col])

print('MAE from label encoding:')
print(score_dataset(label_X_train, label_X_valid, y_train, y_valid))

label_X_train #check value after numerized



MAE = {} 
for i in range(100,1001, 50):
  model = RandomForestRegressor(n_estimators=i, criterion='mse')
  model.fit(label_X_train, y_train)
  preds = model.predict(label_X_valid)
  print(f'n_estimators={i}:','MAE:', mean_absolute_error(y_valid, preds))
  MAE[f'n_estimators={i}'] = mean_absolute_error(y_valid, preds)

sorted_MAE_RFR = sorted(MAE.items(), key=lambda kv: kv[1])

sorted_MAE_RFR

model = RandomForestRegressor(n_estimators=950, criterion='mse')
model.fit(label_X_train, y_train)
preds = model.predict(label_X_valid)
print(f'n_estimators={i}:','MAE:', mean_absolute_error(y_valid, preds))

preds_round = preds.round()

cm = confusion_matrix(y_valid, preds_round)

cm

#predcitions accuracy
correct_predicts = 0
total_predicts = 0
for i in range(len(y_valid)):
  if y_valid.iloc[i] == preds_round[i]:
    correct_predicts += 1
  total_predicts +=1
print('prediction accuracy = {}'.format(correct_predicts/total_predicts))

#------------Preprocessing test data---------------#

titanic_test = titanic_test.set_index('PassengerId')

titanic_test.shape

titanic_test['AgeGroup']=pd.cut(titanic_test['Age'],[0,19,65,100], labels=['Minor','Adult','Elder']) #age catgorized

titanic_test.isnull().sum()

label_X_train.columns

label_X_train_cols = []
for i in label_X_train.columns:
  label_X_train_cols.append(i)

titanic_test = titanic_test.drop('Age', axis=1)

T = titanic_test

T.loc[T['AgeGroup'].isnull()]

T_null_check = T.loc[T['AgeGroup'].isnull()] #Null check

T_null_check.index

#Fill in NaN in ['AgeGroup']
for id in T_null_check.index:
  if T.loc[id,'SibSp'] >= 1  and T.loc[id, 'Parch'] >= 1:
    T.loc[id,'AgeGroup'] = 'Minor'
  elif T.loc[id,'SibSp'] >= 1 or T.loc[id, 'Parch'] >= 1:
    T.loc[id,'AgeGroup'] = 'Adult'
  else:
    T.loc[id,'AgeGroup'] = 'Elder'

T.isnull().sum()

T.loc[T['Fare'].isnull()]

mean = T.groupby('Pclass').mean()['Fare'][3] #mean=average(Pclass 3)'s fare

T['Fare'] = T['Fare'].fillna(value=mean) #FillNA with mean

T.loc[1044]

T = T[label_X_train_cols] #keep training columns

label_T = T.copy()


# Apply label encoder to each column with categorical data
label_encoder = LabelEncoder()
for col in object_cols:
  label_X_train[col] = label_encoder.fit_transform(X_train[col])
  label_T[col] = label_encoder.transform(T[col])

label_T

preds_T = model.predict(label_T) #making predictions

preds_T

preds_T_round = preds_T.round()

preds_T_round

preds_T_int = preds_T_round.astype(int)

preds_T_int

output = pd.DataFrame({'PassengerId': label_T.index,
                       'Survived': preds_T_int})
output.to_csv('submission.csv', index=False)

#files.download('submission.csv')

#-------try less columns------#

label_X_train_less = label_X_train.drop(['SibSp','Parch','Fare'], axis=1)

label_X_train_less

label_X_valid_less = label_X_valid.drop(['SibSp','Parch','Fare'], axis=1)

MAE_less = {} 
for i in range(100,1001, 50):
  model = RandomForestRegressor(n_estimators=i, criterion='mse')
  model.fit(label_X_train_less, y_train)
  preds = model.predict(label_X_valid_less)
  print(f'n_estimators={i}:','MAE:', mean_absolute_error(y_valid, preds))
  MAE_less[f'n_estimators={i}'] = mean_absolute_error(y_valid, preds)

sorted_MAE_less_RFR = sorted(MAE_less.items(), key=lambda kv: kv[1])

sorted_MAE_less_RFR

model_700 = RandomForestRegressor(n_estimators=700, criterion='mse')
model_700.fit(label_X_train_less, y_train)
preds_700 = model_700.predict(label_X_valid_less)
print(mean_absolute_error(y_valid, preds_700))

model = RandomForestRegressor(n_estimators=150, criterion='mse')
model.fit(label_X_train_less, y_train)
preds_150 = model.predict(label_X_valid_less)
print(mean_absolute_error(y_valid, preds_150))

preds_700_round = preds_700.round()

#predcitions accuracy
correct_predicts_700 = 0
total_predicts_700 = 0
for i in range(len(y_valid)):
  if y_valid.iloc[i] == preds_700_round[i]:
    correct_predicts_700 += 1
  total_predicts_700 +=1
print('prediction accuracy = {}'.format(correct_predicts_700/total_predicts_700))

preds_150_round = preds_150.round()

#predcitions accuracy
correct_predicts_150 = 0
total_predicts_150 = 0
for i in range(len(y_valid)):
  if y_valid.iloc[i] == preds_150_round[i]:
    correct_predicts_150 += 1
  total_predicts_150 +=1
print('prediction accuracy = {}'.format(correct_predicts_150/total_predicts_150))

cm_700 = confusion_matrix(y_valid, preds_700_round)

cm_150 = confusion_matrix(y_valid, preds_150_round)

#------------Preprocessing test data(LESS COLS)---------------#

titanic_test = titanic_test.set_index('PassengerId')

titanic_test.shape

titanic_test['AgeGroup']=pd.cut(titanic_test['Age'],[0,19,65,100], labels=['Minor','Adult','Elder']) #age catgorized

titanic_test.isnull().sum()

label_X_train.columns

label_X_train_cols_less = []
for i in label_X_train_less.columns:
  label_X_train_cols_less.append(i)

titanic_test = titanic_test.drop('Age', axis=1)

T = titanic_test

T.loc[T['AgeGroup'].isnull()]

T_null_check = T.loc[T['AgeGroup'].isnull()] #Null check

T_null_check.index

#Fill in NaN in ['AgeGroup']
for id in T_null_check.index:
  if T.loc[id,'SibSp'] >= 1  and T.loc[id, 'Parch'] >= 1:
    T.loc[id,'AgeGroup'] = 'Minor'
  elif T.loc[id,'SibSp'] >= 1 or T.loc[id, 'Parch'] >= 1:
    T.loc[id,'AgeGroup'] = 'Adult'
  else:
    T.loc[id,'AgeGroup'] = 'Elder'

T.isnull().sum()

T.loc[T['Fare'].isnull()]

mean = T.groupby('Pclass').mean()['Fare'][3] #mean=average(Pclass 3)'s fare

T['Fare'] = T['Fare'].fillna(value=mean) #FillNA with mean

T.loc[1044]

T_less = T[label_X_train_cols_less] #keep training columns

label_T_less = T_less.copy()


# Apply label encoder to each column with categorical data
label_encoder = LabelEncoder()
for col in object_cols:
  label_X_train_less[col] = label_encoder.fit_transform(X_train[col])
  label_T_less[col] = label_encoder.transform(T_less[col])

label_T_less

preds_T_less = model_700.predict(label_T_less) #making predictions

preds_T_less

preds_T_less_round = preds_T_less.round()

preds_T_less_round

preds_T_less_int = preds_T_less_round.astype(int)

preds_T_less_int

output = pd.DataFrame({'PassengerId': label_T_less.index,
                       'Survived': preds_T_less_int})
output.to_csv('submission.csv', index=False)